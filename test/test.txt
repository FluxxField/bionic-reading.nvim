-- NOTE: syllables are made of 3 things: onset, nucleus, coda
-- We only care about the first nucleus (vowel) and the preceding onset (consonant/consonant cluster)
function Utils.highlight_on_first_syllable(word)
	-- NOTE: y is a semi-vowel/consonant and cannot always be considered a vowel
	local vowels = { a = true, e = true, i = true, o = true, u = true, y = true }
	local coda_exceptions = { g = true }

	if word == nil or word == "" then
		return 0
	end

	if #word <= 3 then
		return 1
	end

	for char_index = 1, #word do
		local char = string.lower(word:sub(char_index, char_index))
		local is_vowel = vowels[char] ~= nil

		if not is_vowel then
			goto continue
		else
			if char_index == #word then
				return math.floor(#word / 2)
			end
		end

		local coda = 1
		local next_char_index = char_index + coda
		local next_char = string.lower(word:sub(next_char_index, next_char_index))
		local next_char_is_vowel = vowels[next_char] ~= nil

		-- vowel cluster
		if next_char_is_vowel then
			-- we dont want to highlight the whole word
			if next_char_index + coda == #word then
				return math.floor(#word / 2)
			end

			return next_char_index + coda
		else
			if coda_exceptions[next_char] ~= nil then
				local second_coda_index = next_char_index + coda

				if string.lower(word:sub(second_coda_index, second_coda_index)) == "h" then
					coda = 2
				end
			end

			-- we dont want to highlight the whole word
			if char_index + coda == #word then
				return math.floor(#word / 2)
			end

			return char_index + coda
		end

		::continue::
	end
end
