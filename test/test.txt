
-- NOTE: syllables are made of 3 things: onset (before vowel), nucleus (vowel), coda (after vowel)
-- We only care about the first nucleus and the preceding onset
function Utils.highlight_on_first_syllable(word)
	local vowel_clusters = { "au", "ai", "ea", "ee", "ei", "eu", "ie", "io", "oa", "oe", "oi", "oo", "ou", "ue", "ui" }
	local coda_exceptions = { "gh", "nd", "ld", "st" }
	if word == nil or word == "" then
		return 0
	end

	if #word <= 3 then
		return 1
	end

	if #word == 4 then
		return 2
	end

	for cur_char_index = 1, #word do
		local substring = string.lower(word:sub(cur_char_index, cur_char_index + 1))

		for _, combination in ipairs(vowel_clusters) do
			-- a vowel cluster usually doesn't have a coda
			if substring == combination then
				if cur_char_index + 1 == #word then
					return math.floor(#word / 2)
				end

				return cur_char_index + 1
			end
		end

		local char = string.lower(word:sub(cur_char_index, cur_char_index))

		if is_vowel(char) then
			-- if the first vowel is the last letter, we dont want to highlight the whole word
			if cur_char_index == #word then
				return math.floor(#word / 2)
			end

			-- coda is the consonant(s) that follow the nucleus
			local coda = 1
			local next_char_index = cur_char_index + coda
			local next_char = string.lower(word:sub(next_char_index, next_char_index + 1))

			for _, exception in ipairs(coda_exceptions) do
				if next_char == exception then
					if next_char_index + 1 == #word then
						return cur_char_index
					end

					coda = 2
				end
			end

			return cur_char_index + coda
		end
	end
end
